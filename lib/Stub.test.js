"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Stub = require("./Stub");
it("works on basic objects", function () {
    var stub = Stub.createStub();
    var object = {
        next: stub
    };
    expect(Stub.isUnassignedStub(stub)).toBeTruthy();
    var assignedObject = Stub.assign(stub, object);
    expect(assignedObject).toBe(stub);
    expect(Stub.isUnassignedStub(stub)).toBeFalsy();
    expect(assignedObject.next).toBe(assignedObject);
    expect(assignedObject.next.next).toBe(assignedObject);
});
it("works in cycle", function () {
    var stub1 = Stub.createStub();
    var stub2 = Stub.createStub();
    var object1 = Stub.assign(stub1, { next: stub2 });
    var object2 = Stub.assign(stub2, { next: stub1 });
    expect(object1).not.toBe(object2);
    expect(object1.next).toBe(object2);
    expect(object2.next).toBe(object1);
});
it("works with interfaces", function () {
    var stub = Stub.createStub();
    expect(Stub.isUnassignedStub(stub)).toBeTruthy();
    var object = Stub.assign(stub, { name: "bar" });
    expect(object).toBe(stub);
    expect(object.name).toBe("bar");
});
var BasicClass = (function () {
    function BasicClass(name) {
        this.name = name;
    }
    return BasicClass;
}());
it("works with classes", function () {
    var stub = Stub.createStub();
    expect(stub).not.toBeInstanceOf(BasicClass);
    expect(Stub.isUnassignedStub(stub)).toBeTruthy();
    var object = Stub.assign(stub, new BasicClass("foo"));
    expect(object).toBe(stub);
    expect(object).toBeInstanceOf(BasicClass);
    expect(object.name).toBe("foo");
});
var SelfReferencingClass = (function () {
    function SelfReferencingClass(next) {
        this.next = next;
    }
    return SelfReferencingClass;
}());
it("self-referencing works with classes", function () {
    var stub = Stub.createStub();
    var object = Stub.assign(stub, new SelfReferencingClass(stub));
    expect(object).toBe(stub);
    expect(object).toBeInstanceOf(SelfReferencingClass);
    expect(object.next).toBe(object);
    expect(object.next).toBeInstanceOf(SelfReferencingClass);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3R1Yi50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL1N0dWIudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLDZCQUErQjtBQU0vQixFQUFFLENBQUMsd0JBQXdCLEVBQUU7SUFDM0IsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBMkIsQ0FBQztJQUV4RCxJQUFNLE1BQU0sR0FBRztRQUNiLElBQUksRUFBRSxJQUFJO0tBQ1gsQ0FBQztJQUVGLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUVqRCxJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztJQUVqRCxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2xDLE1BQU0sQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUVoRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztJQUNqRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDeEQsQ0FBQyxDQUFDLENBQUM7QUFFSCxFQUFFLENBQUMsZ0JBQWdCLEVBQUU7SUFDbkIsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBMkIsQ0FBQztJQUN6RCxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsVUFBVSxFQUEyQixDQUFDO0lBRXpELElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7SUFDcEQsSUFBTSxPQUFP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